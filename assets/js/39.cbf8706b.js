(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{528:function(t,s,a){"use strict";a.r(s);var e=a(41),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"《ecmascript6-入门》"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#《ecmascript6-入门》"}},[t._v("#")]),t._v(" 《ECMAScript6 入门》")]),t._v(" "),a("h2",{attrs:{id:"let-和-const-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-和-const-命令"}},[t._v("#")]),t._v(" let 和 const 命令")]),t._v(" "),a("h3",{attrs:{id:"let-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-命令"}},[t._v("#")]),t._v(" let 命令")]),t._v(" "),a("ol",[a("li",[t._v("循环体的 let 变量只对花括号作用域可见，花括号外不可见")]),t._v(" "),a("li",[t._v("循环体的语句部分是一个父作用域，而循环体内部是一个单独的子作用域")]),t._v(" "),a("li",[t._v("let 声明的变量不存在变量提升，未声明的使用会报错")]),t._v(" "),a("li",[t._v("只要块级作用域内存在 let 声明，它所声明的变量就绑定了这个区域，不再受外部的影响")]),t._v(" "),a("li",[t._v("let 不允许在相同的作用域重复声明同一个变量，子父级作用域可以同名变量声明")])]),t._v(" "),a("h3",{attrs:{id:"const-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const-命令"}},[t._v("#")]),t._v(" const 命令")]),t._v(" "),a("ol",[a("li",[t._v("const 常量的值一旦声明就不得改变")]),t._v(" "),a("li",[t._v("const 一旦声明变量，就必须立即初始化，不能留到以后赋值")]),t._v(" "),a("li",[t._v("const 的作用域与 let 命令相同，只在声明所在的块级作用域内有效")]),t._v(" "),a("li",[t._v("const 命令同样存在暂时性死区，只能在声明的位置后面使用")]),t._v(" "),a("li",[t._v("const 声明的常量，也与 let 一样不可重复声明")]),t._v(" "),a("li",[t._v("对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址，所以 const 命令只是保证变量名指向的地址不变，并不保证该地址的数据不变")])]),t._v(" "),a("p",[a("strong",[t._v("——let 和 const 命令的声明不再自动纳入 global 对象(window)")])]),t._v(" "),a("h3",{attrs:{id:"块级作用域与函数声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域与函数声明"}},[t._v("#")]),t._v(" 块级作用域与函数声明")]),t._v(" "),a("ol",[a("li",[t._v("ES6 的浏览器下，块级作用域内声明的函数会被提升至全局作用域或函数作用域顶部，作为"),a("code",[t._v("var fn = undefined")])]),t._v(" "),a("li",[t._v("其他的游览器下，还是将块级作用域的函数声明当作 let 处理")]),t._v(" "),a("li",[t._v("应该避免在块级作用域内声明函数，如果确实需要也应该使用函数表达式而不是函数声明")]),t._v(" "),a("li",[t._v("ES6 的块级作用域允许声明函数，但只在使用大括号的情况下成立，如果没有使用大括号就会报错")])]),t._v(" "),a("h2",{attrs:{id:"变量的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的解构赋值"}},[t._v("#")]),t._v(" 变量的解构赋值")]),t._v(" "),a("h3",{attrs:{id:"数组的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组的解构赋值"}},[t._v("#")]),t._v(" 数组的解构赋值")]),t._v(" "),a("ol",[a("li",[t._v("只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值")]),t._v(" "),a("li",[t._v("解构赋值允许指定默认值，但是如果一个数组成员不严格等于 undefined，默认值不会生效")]),t._v(" "),a("li",[t._v("如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候才会求值")]),t._v(" "),a("li",[t._v("默认值可以引用解构赋值的其他变量，但该变量必须已经声明")]),t._v(" "),a("li",[t._v("可以使用嵌套进行解构赋值")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" baz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"对象的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的解构赋值"}},[t._v("#")]),t._v(" 对象的解构赋值")]),t._v(" "),a("ol",[a("li",[t._v("变量必须与属性同名，才能取到正确的值")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bbb"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",[a("li",[t._v("如果变量名与属性名不一致，必须写成")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" baz "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bbb"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",[a("li",[t._v("声明后再进行的赋值必须加圆括号")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("——")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",[a("li",[t._v("对象的解构也可以指定默认值，同数组一样成员对应必须严格等于 "),a("code",[t._v("undefined")]),t._v("，默认值才会生效")])]),t._v(" "),a("h3",{attrs:{id:"字符串的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的解构赋值"}},[t._v("#")]),t._v(" 字符串的解构赋值")]),t._v(" "),a("ol",[a("li",[t._v("字符串进行解构赋值时，会被转换成一个类似数组的对象")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",[a("li",[t._v("类似数组的对象都有一个 length 属性，因此还可以对这个属性解构赋值")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"数值和布尔值的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值和布尔值的解构赋值"}},[t._v("#")]),t._v(" 数值和布尔值的解构赋值")]),t._v(" "),a("ol",[a("li",[t._v("解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("ol",[a("li",[t._v("由于 undefined 和 null 无法转为对象，所以对它们进行解构赋值，都会报错")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("prop")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeError")]),t._v("\n")])])]),a("h3",{attrs:{id:"函数参数的解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数参数的解构赋值"}},[t._v("#")]),t._v(" 函数参数的解构赋值")]),t._v(" "),a("ol",[a("li",[t._v("函数参数的解构赋值遵循基本解构类型的特点")])]),t._v(" "),a("h3",{attrs:{id:"圆括号问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#圆括号问题"}},[t._v("#")]),t._v(" 圆括号问题")]),t._v(" "),a("ul",[a("li",[t._v("不能使用圆括号的情况：\n"),a("ul",[a("li",[t._v("a.变量声明语句中，不能带有圆括号")]),t._v(" "),a("li",[t._v("b.函数参数中，模式不能带有圆括号")]),t._v(" "),a("li",[t._v("c.赋值语句中，不能将整个模式，或嵌套模式中的一层，放在圆括号之中")])])]),t._v(" "),a("li",[t._v("能使用圆括号的情况：\n"),a("ul",[a("li",[t._v("a.赋值语句的非模式部分，可以使用圆括号")])])])]),t._v(" "),a("h3",{attrs:{id:"解构赋值的用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值的用途"}},[t._v("#")]),t._v(" 解构赋值的用途")]),t._v(" "),a("ol",[a("li",[t._v("交换变量的值")]),t._v(" "),a("li",[t._v("从函数返回多个值")]),t._v(" "),a("li",[t._v("函数参数的定义")]),t._v(" "),a("li",[t._v("提取 JSON 数据")]),t._v(" "),a("li",[t._v("函数参数的默认值")]),t._v(" "),a("li",[t._v("遍历 Map 结构")]),t._v(" "),a("li",[t._v("输入模块的指定方法")])]),t._v(" "),a("h2",{attrs:{id:"字符串的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的扩展"}},[t._v("#")]),t._v(" 字符串的扩展")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("codePointAt()")]),t._v("——处理 4 个字节储存的字符，返回一个字符的码点（默认十进制，十六进制可以使用 toString 方法转换）")]),t._v(" "),a("li",[a("strong",[t._v("String.fromCodePoint()")]),t._v("——可以识别大于 0xFFFF 的字符，弥补了 String.fromCharCode 方法的不足")]),t._v(" "),a("li",[t._v("ES6 为字符串添加了"),a("strong",[t._v("遍历器接口 for...of")]),t._v("，除了遍历字符串，这个遍历器最大的优点是可以识别大于 0xFFFF 的码点")]),t._v(" "),a("li",[a("strong",[t._v("at()提案")]),t._v("——识别 Unicode 编号大于 0xFFFF 的字符，返回正确的字符")]),t._v(" "),a("li",[a("strong",[t._v("normalize()")]),t._v("——将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化")]),t._v(" "),a("li",[t._v("索引字符是否存在——接受二个参数，第一个表示索引字符，第二个表示起始位置\n"),a("ul",[a("li",[a("strong",[t._v("includes()")]),t._v("——返回布尔值，表示是否找到了参数字符串")]),t._v(" "),a("li",[a("strong",[t._v("startsWith()")]),t._v("——返回布尔值，表示参数字符串是否在源字符串的头部")]),t._v(" "),a("li",[a("strong",[t._v("endsWith()")]),t._v("——返回布尔值，表示参数字符串是否在源字符串的尾部")])])]),t._v(" "),a("li",[a("strong",[t._v("repeat()")]),t._v("——将原字符串重复 n 次，返回一个新字符串\n"),a("ul",[a("li",[t._v("a.参数如果是小数，会被取整")]),t._v(" "),a("li",[t._v("b.参数是负数或 Infinity，会报错")]),t._v(" "),a("li",[t._v("c.参数是 0 到-1 之间的小数，则等同于 0（这是因为会先进行取整运算）")]),t._v(" "),a("li",[t._v("d.参数是字符串，则会先转换成数字")])])]),t._v(" "),a("li",[a("strong",[t._v("字符串补全长度")]),t._v("——接受两个参数（第一个表示字符串补全的最小长度，第二个表示要参与补全的字符串）\n"),a("ul",[a("li",[a("strong",[t._v("padStart()")]),t._v("——用于头部补全")]),t._v(" "),a("li",[a("strong",[t._v("padEnd()")]),t._v("——用于尾部补全\n"),a("ul",[a("li",[t._v("a.如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串")]),t._v(" "),a("li",[t._v("b.如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串")]),t._v(" "),a("li",[t._v("c.如果省略第二个参数，默认使用空格补全长度")])])]),t._v(" "),a("li",[a("strong",[t._v("用途")]),t._v("：\n"),a("ul",[a("li",[t._v("a.为数值补全指定位数"),a("code",[t._v("'1'.padStart(10, '0')")])]),t._v(" "),a("li",[t._v("b.日期字符串格式化"),a("code",[t._v("'12'.padStart(10, 'YYYY-MM-DD')")])])])])])]),t._v(" "),a("li",[t._v("模板字符串\n"),a("ul",[a("li",[t._v("a.模板字符串是增强版的字符串，用反引号（）标识")]),t._v(" "),a("li",[t._v("b.可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量")]),t._v(" "),a("li",[t._v("c.空格，缩进和换行的状态都会被保持，除非使用.trim()去除")]),t._v(" "),a("li",[t._v("d.模板字符串中嵌入变量，需要将变量名写在${}之中，{}相当于 js 执行域，可以放置变量，表达式和函数(可调用)等")]),t._v(" "),a("li",[t._v("e.如果大括号中的值不是字符串，将按照一般的规则转为字符串；如果内部是一个字符串，将原样输出")])])]),t._v(" "),a("li",[t._v("标签模版\n"),a("ul",[a("li",[t._v('a.模版字符串前跟函数名，该函数将会被调用来处理该模版字符串，这被称为"标签模版"功能')]),t._v(" "),a("li",[t._v("b.函数处理模版字符串的时候，会将没有变量${}的部分拼合成数组参数，变量${}部分的结果作为后续参数")]),t._v(" "),a("li",[t._v("c.函数处理模版字符串时，参数形式被转换为(数组，参数 1，参数 2..)，其中的数组项有一个 raw 属性，与参数数组的项几乎相同，唯一的区别是字符串里面的斜杠都被转义了")])])]),t._v(" "),a("li",[t._v("String.raw 模版字符串\n"),a("ul",[a("li",[t._v("a.用于处理模版字符串，返回一个斜杠都被转义的字符串(如果原字符串斜杠已经转义，String.raw 不会做任何处理)")]),t._v(" "),a("li",[t._v("b.也可以作为正常的函数使用，第一个参数应该是一个具有 raw 属性的对象，且 raw 属性的值应该是一个数组")])])]),t._v(" "),a("li",[t._v("模版字符串的限制\n"),a("ul",[a("li",[t._v("a.默认会将字符串转义，因此导致了无法嵌入其他语言")]),t._v(" "),a("li",[t._v("b.解决提案——遇到不合法的字符串转义，就返回 undefined，而不是报错，并且从 raw 属性上面可以得到原始字符串")])])])]),t._v(" "),a("h2",{attrs:{id:"正则的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则的扩展"}},[t._v("#")]),t._v(" 正则的扩展")]),t._v(" "),a("h3",{attrs:{id:"修饰符u"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符u"}},[t._v("#")]),t._v(" 修饰符u")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("用来正确处理大于\\uFFFF的Unicode字符，也就是说会正确处理四个字节的UTF-16编码")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'你'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 中文代表2个字符")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Unicode字符表示法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\u{61}")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false，被解读为量词16")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("61")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true，解读为Unicode")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("无效的转义会报错")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\A")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("u "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"修饰符y"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符y"}},[t._v("#")]),t._v(" 修饰符y")]),t._v(" "),a("p",[t._v("y修饰符又称为粘连修饰符，也就是说在连续匹配时，匹配位置必须从剩余的第一个位置开始")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaa_aa_a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("y")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["aaa"]')]),t._v("\nr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["aaa"]')]),t._v("\n\nr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["aa"]')]),t._v("\nr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n")])])]),a("h3",{attrs:{id:"修饰符s"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符s"}},[t._v("#")]),t._v(" 修饰符s")]),t._v(" "),a("p",[t._v("正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，但是有两个例外")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("一个是四个字节的 UTF-16 字符，这个可以用u修饰符解决")])]),t._v(" "),a("li",[a("p",[t._v("一个是行终止符，该字符表示一行的终结，以下四个字符属于行终止符")]),t._v(" "),a("ul",[a("li",[t._v("U+000A 换行符（\\n）")]),t._v(" "),a("li",[t._v("U+000D 回车符（\\r）")]),t._v(" "),a("li",[t._v("U+2028 行分隔符（line separator）")]),t._v(" "),a("li",[t._v("U+2029 段分隔符（paragraph separator）")])])])]),t._v(" "),a("p",[t._v("ES2018引入s修饰符，使得.可以匹配任意单个字符，这又被称为dotAll模式，即点（dot）代表一切字符")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// es2018前")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo\\nbar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\\s\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo\\nbar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// es2018后")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo\\nbar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("基于s修饰符还引入了一个dotAll属性，返回一个布尔值，表示该正则表达式是否处在dotAll模式")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("foo.bar")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("s")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo\\nbar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dotAll "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("foo.bar")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo\\nbar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dotAll "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("h3",{attrs:{id:"新增实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新增实例属性"}},[t._v("#")]),t._v(" 新增实例属性")]),t._v(" "),a("h4",{attrs:{id:"unicode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unicode"}},[t._v("#")]),t._v(" unicode")]),t._v(" "),a("p",[t._v("是否设置了u修饰符")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" r1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" r2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("u")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unicode "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unicode "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h4",{attrs:{id:"sticky"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sticky"}},[t._v("#")]),t._v(" sticky")]),t._v(" "),a("p",[t._v("是否设置了y修饰符")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("hello\\d")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("y")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sticky "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h4",{attrs:{id:"flags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flags"}},[t._v("#")]),t._v(" flags")]),t._v(" "),a("p",[t._v("返回正则表达式的修饰符")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("abc")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'gi'")]),t._v("\n")])])]),a("h3",{attrs:{id:"后行断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后行断言"}},[t._v("#")]),t._v(" 后行断言")]),t._v(" "),a("p",[t._v("ES2018引入后行断言，V8引擎4.9版（Chrome 62）已经支持")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先行断言")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该位置后面要匹配y（正向）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该位置后面不要要匹配y（负向）")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后行断言")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该位置前面要匹配y（正向）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该位置前面不要要匹配y（负向）")]),t._v("\n")])])]),a("p",[t._v("断言里的反向引用")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先行断言-分组应该在前，反向引用应该在后")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hodor'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("d\\"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hodor'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["h", "o"]')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后行断言-分组应该在后，反向引用应该在前")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("d\\"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hodor'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hodor'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["r", "o"]')]),t._v("\n")])])]),a("h3",{attrs:{id:"unicode-属性类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unicode-属性类"}},[t._v("#")]),t._v(" Unicode 属性类")]),t._v(" "),a("p",[t._v("ES2018允许使用"),a("code",[t._v("\\p{...}")]),t._v("和"),a("code",[t._v("\\P{...}")]),t._v("（\\P是\\p的否定形式）代表一类Unicode字符，匹配满足条件的所有字符。")]),t._v(" "),a("p",[t._v("Unicode属性类的标准形式，需要指定属性名和属性值，同时加上修饰符u")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regexGreekSymbol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\p{Script=Greek}")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("u")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nregexGreekSymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'π'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("对于某些属性，可以只写属性名，或者只写属性值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("UnicodePropertyName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("UnicodePropertyValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"具名组匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具名组匹配"}},[t._v("#")]),t._v(" 具名组匹配")]),t._v(" "),a("p",[t._v("ES2018引入了具名组匹配，允许为每一个分组匹配指定一个名字，既便于阅读代码，又便于引用")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE_DATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" matchObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE_DATE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1999-12-31'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" year "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("year"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1999"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" month "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("month"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "12"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" day "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("day"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "31"')]),t._v("\n")])])]),a("p",[t._v("具名组匹配的属性始终存在，如果没有匹配到结果，那么对应的groups对象属性会是undefined。")]),t._v(" "),a("h4",{attrs:{id:"字符串替换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串替换"}},[t._v("#")]),t._v(" 字符串替换")]),t._v(" "),a("p",[t._v("可以使用"),a("code",[t._v("$<组名>")]),t._v("引用具名组")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("u")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2015-01-02'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$<day>/$<month>/$<year>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '02/01/2015'")]),t._v("\n")])])]),a("h4",{attrs:{id:"反向引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向引用"}},[t._v("#")]),t._v(" 反向引用")]),t._v(" "),a("p",[t._v("当应用了具名组匹配时，反向引用可以使用"),a("code",[t._v("\\k<组名>")]),t._v("的写法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE_TWICE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(?<word>[a-z]+)!\\k<word>$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE_TWICE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc!abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE_TWICE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc!ab'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("原有"),a("code",[t._v("\\数字")]),t._v("可以和"),a("code",[t._v("\\k<组名>")]),t._v("同时使用")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE_TWICE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(?<word>[a-z]+)!\\k<word>!\\1$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE_TWICE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc!abc!abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE_TWICE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc!abc!ab'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("h3",{attrs:{id:"正则匹配索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则匹配索引"}},[t._v("#")]),t._v(" 正则匹配索引")]),t._v(" "),a("p",[t._v("目前ES2022第4阶段提案，为exec()方法的返回结果加上了indices属性，在这个属性上面可以拿到匹配的开始位置和结束位置（非最后匹配位置，而是下一个开始位置）。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zabbcdef'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ab")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indices "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ [1, 3] ]")]),t._v("\n")])])]),a("p",[t._v("如果正则表达式包含分组，那么indices属性对应的数组就会包含多个成员匹配的开始位置和结束位置")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zabbcdef'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ab+(cd)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indices "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ [ 1, 6 ], [ 4, 6 ] ]")]),t._v("\n")])])]),a("p",[t._v("如果正则表达式包含具名组匹配，indices属性数组还会有一个groups属性。该属性是一个对象，可以从该对象获取具名组匹配的开始位置和结束位置。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zabbcdef'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ab+(?<Z>cd)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indices"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { Z: [ 4, 6 ] }")]),t._v("\n")])])]),a("p",[t._v("如果获取组匹配不成功，indices属性数组的对应成员则为undefined，indices.groups属性对象的对应成员也是undefined。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zabbcdef'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ab+(?<Z>ce)?")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indices"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indices"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Z'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),a("h2",{attrs:{id:"数值的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值的扩展"}},[t._v("#")]),t._v(" 数值的扩展")]),t._v(" "),a("h3",{attrs:{id:"二进制和八进制表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二进制和八进制表示法"}},[t._v("#")]),t._v(" 二进制和八进制表示法")]),t._v(" "),a("ol",[a("li",[t._v("二进制——0b（或 0B）")]),t._v(" "),a("li",[t._v("八进制——0o（或 0O）")])]),t._v(" "),a("h3",{attrs:{id:"新增-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新增-api"}},[t._v("#")]),t._v(" 新增 api")]),t._v(" "),a("ol",[a("li",[t._v("Number.isInteger()——是否为整数")]),t._v(" "),a("li",[t._v("Number.EPSILON——极小常量，可以接受的误差范围")]),t._v(" "),a("li",[t._v("Number.MAX_SAFE_INTEGER")]),t._v(" "),a("li",[t._v("Number.MIN_SAFE_INTEGER——安全整数")]),t._v(" "),a("li",[t._v("Number.isSafeInteger()——整数是否落在安全范围（超出精度的结果会被自动设为界点值，所以验证运算结果是否落在安全整数的范围内，不要只验证运算结果，而要同时验证参与运算的每个值）")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trusty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSafeInteger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSafeInteger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSafeInteger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RangeError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Operation cannot be trusted!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"math-对象的拓展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#math-对象的拓展"}},[t._v("#")]),t._v(" Math 对象的拓展")]),t._v(" "),a("ol",[a("li",[t._v("Math.trunc()——去除一个数的小数部分")]),t._v(" "),a("li",[t._v("Math.sign()——判断一个数是正数，负数，还是零")]),t._v(" "),a("li",[t._v("Math.cbrt()——计算一个数的立方根")]),t._v(" "),a("li",[t._v("Math.clz32()——一个数的 32 位无符号整数形式有多少个前导 0")]),t._v(" "),a("li",[t._v("Math.imul()——返回两个数以 32 位带符号整数形式相乘的结果（解决相乘数超过 js 精度的问题）")]),t._v(" "),a("li",[t._v("Math.fround()——返回一个数的单精度浮点数形式(主要用于那些无法用 64 个二进制位精确表示的小数)")]),t._v(" "),a("li",[t._v("Math.hypot()——返回所有参数的平方和的平方根")])]),t._v(" "),a("h3",{attrs:{id:"指数运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指数运算符"}},[t._v("#")]),t._v(" 指数运算符")]),t._v(" "),a("ul",[a("li",[t._v("数值"),a("code",[t._v("**")]),t._v("数值=结果——2**3=8")])]),t._v(" "),a("h2",{attrs:{id:"函数的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的扩展"}},[t._v("#")]),t._v(" 函数的扩展")]),t._v(" "),a("h3",{attrs:{id:"函数参数的默认值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数参数的默认值"}},[t._v("#")]),t._v(" 函数参数的默认值")]),t._v(" "),a("ol",[a("li",[t._v("参数变量是默认声明的，不能用 let 或 const 再次声明(可用 var，两者独立)")]),t._v(" "),a("li",[t._v("使用参数默认值时，不能有同名参数")]),t._v(" "),a("li",[t._v("参数默认值是惰性求值的——如果参数默认值是变量，那么参数实际值只有运行时才能确定")]),t._v(" "),a("li",[t._v("参数默认值可为解构赋值形式"),a("code",[t._v("function({a}={}){}")])])]),t._v(" "),a("h3",{attrs:{id:"函数的-length-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的-length-属性"}},[t._v("#")]),t._v(" 函数的 length 属性")]),t._v(" "),a("ul",[a("li",[t._v("函数的 length 属性，不包括 rest 参数和参数默认值")])]),t._v(" "),a("h3",{attrs:{id:"函数默认值作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数默认值作用域"}},[t._v("#")]),t._v(" 函数默认值作用域")]),t._v(" "),a("ol",[a("li",[t._v("一旦设置了参数默认值，函数进行声明初始化时，参数会形成一个单独的作用域")]),t._v(" "),a("li",[t._v("参数默认值形成的作用域与函数体内部的作用域不属于同一个作用域，后者优先级大于前者")])]),t._v(" "),a("h3",{attrs:{id:"rest-参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rest-参数"}},[t._v("#")]),t._v(" rest 参数")]),t._v(" "),a("ol",[a("li",[t._v("获取函数的多余参数，在参数中展现为数组")]),t._v(" "),a("li",[t._v("rest 只能作为最后一个，它之后不能再有其他参数")])]),t._v(" "),a("h3",{attrs:{id:"扩展运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符"}},[t._v("#")]),t._v(" 扩展运算符")]),t._v(" "),a("ol",[a("li",[t._v("将一个数组转为用逗号分隔的参数序列——可用于伪数组(arguments, cnodelist)")]),t._v(" "),a("li",[t._v("如果将扩展运算符用于数组的解构赋值，只能放在参数的最后一位，否则会报错")]),t._v(" "),a("li",[t._v("任何实现了 Iterator 接口的对象，都可以用扩展运算符转为真正的数组——### ...伪数组")]),t._v(" "),a("li",[t._v("扩展运算符在处理字符串(Iterator 接口)时，除能将其转换为数组还能识别 32 位的 Unicode 字符")])]),t._v(" "),a("h3",{attrs:{id:"严格模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#严格模式"}},[t._v("#")]),t._v(" 严格模式")]),t._v(" "),a("ol",[a("li",[t._v("函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错")]),t._v(" "),a("li",[t._v("解决办法——在函数体外设置严格模式")])]),t._v(" "),a("h3",{attrs:{id:"name-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#name-属性"}},[t._v("#")]),t._v(" name 属性")]),t._v(" "),a("ol",[a("li",[t._v("函数表达式下，es5 的 name 取值为空字符串，es6 为变量名")]),t._v(" "),a("li",[t._v("Function 构造函数返回的函数实例，name 属性的值为 anonymous")]),t._v(" "),a("li",[t._v("bind 返回的函数，name 属性值会加上 bound 前缀+函数名")]),t._v(" "),a("li",[t._v("用一个 Symbol 值的变量去定义方法，name 属性返回 Symbol 值的描述")])]),t._v(" "),a("h3",{attrs:{id:"箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[t._v("#")]),t._v(" 箭头函数")]),t._v(" "),a("ol",[a("li",[t._v("函数体内的 this 对象，就是定义生效时所在的对象，而不是使用时所在的对象")]),t._v(" "),a("li",[t._v("不可以当作构造函数的 new 命令，因为箭头函数内部没有 this，只能获取到外层 this")]),t._v(" "),a("li",[t._v("不可以使用 arguments 对象，该对象在函数体内不存在，可用 rest 参数代替")]),t._v(" "),a("li",[t._v("不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数")]),t._v(" "),a("li",[t._v("super、new.target 在箭头函数中同样不存在，因为不存在内部 this，所以用 call()、apply()、bind()去改变函数 this 指向的操作无效")])]),t._v(" "),a("h3",{attrs:{id:"绑定-this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绑定-this"}},[t._v("#")]),t._v(" 绑定 this")]),t._v(" "),a("ol",[a("li",[t._v("call、apply、bind 的替代品——对象::函数，返回原对象")]),t._v(" "),a("li",[t._v("该运算符会自动将左边的对象，作为上下文环境（即 this 对象），绑定到右边的函数上面")])]),t._v(" "),a("h3",{attrs:{id:"尾调用优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尾调用优化"}},[t._v("#")]),t._v(" 尾调用优化")]),t._v(" "),a("ol",[a("li",[t._v("当尾调用函数内部不依赖于外层变量作用域的时候，函数执行时调用帧就只有一项，这将大大节省内存")]),t._v(" "),a("li",[t._v("ES6 的尾调用优化只在严格模式下开启，正常模式是无效的")])]),t._v(" "),a("h3",{attrs:{id:"尾递归优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尾递归优化"}},[t._v("#")]),t._v(" 尾递归优化")]),t._v(" "),a("ol",[a("li",[t._v("对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误")]),t._v(" "),a("li",[t._v("尾递归的单次调用帧降低了算法复杂度，减轻了运算压力")]),t._v(" "),a("li",[t._v("尾递归应该是单项的，对于多项尾递归同时进行同样会增加调用帧，造成“栈溢出”")]),t._v(" "),a("li",[t._v('解决尾递归调用栈太多的办法是采用"循环"换掉"递归"，在循环中每一步返回另一个函数并执行')])]),t._v(" "),a("h3",{attrs:{id:"函数参数的尾逗号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数参数的尾逗号"}},[t._v("#")]),t._v(" 函数参数的尾逗号")]),t._v(" "),a("ol",[a("li",[t._v("函数参数定义和调用时的参数书写都可以在参数尾部添加多于的逗号")])]),t._v(" "),a("h2",{attrs:{id:"数组的扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组的扩展"}},[t._v("#")]),t._v(" 数组的扩展")]),t._v(" "),a("h3",{attrs:{id:"静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),a("ol",[a("li",[t._v("Array.from——用于将类似数组的对象和可遍历的对象(带 iterable 句柄)转换为真正的数组\n"),a("ul",[a("li",[t._v("a.接受 3 个参数——Array.from（对象，过滤函数，上下文）")]),t._v(" "),a("li",[t._v("b.任何有 length 属性的对象，都可以通过 Array.from 方法转为数组，扩展运算符无法转做到")]),t._v(" "),a("li",[t._v("c.能正确处理各种 Unicode 字符，可以避免 JavaScript 将大于\\uFFFF 的 Unicode 字符，算作两个字符的 bug")])])]),t._v(" "),a("li",[t._v("Array.of——用于将一组值，转换为数组\n"),a("ul",[a("li",[t._v("a.弥补用数组构造函数生成数组的差异性")]),t._v(" "),a("li",[t._v("b.Array(3) ### '','',''与 Array(3, 11, 8) ### 3, 11, 8")])])])]),t._v(" "),a("h3",{attrs:{id:"实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[t._v("#")]),t._v(" 实例方法")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("copyWithin()")]),a("br"),t._v("\n在当前数组内部，将指定位置的成员复制到其他位置(覆盖该位置)，返回当前数组（开始替换的位置，开始复制的位置，结束复制的位置）")]),t._v(" "),a("li",[a("strong",[t._v("fill()")]),a("br"),t._v("\n填充和替换（值，起始位置，结束为止）")]),t._v(" "),a("li",[a("strong",[t._v("includes(值，位置)")]),a("br"),t._v("\n是否包含给定值(不像 indexOf 方法一样采用全等于进行比较)")]),t._v(" "),a("li",[a("strong",[t._v("find(条件函数)")]),a("br"),t._v("\n查找符合条件的值并返回")]),t._v(" "),a("li",[a("strong",[t._v("findIndex(条件函数)")]),a("br"),t._v("\n查找符合条件的值并返回位置")]),t._v(" "),a("li",[a("strong",[t._v("entries()")]),a("br"),t._v("\n键值对遍历器(iterator)")]),t._v(" "),a("li",[a("strong",[t._v("keys()")]),a("br"),t._v("\n键名遍历器(iterator)")]),t._v(" "),a("li",[a("strong",[t._v("values()")]),a("br"),t._v("\n键值遍历器(iterator)")])]),t._v(" "),a("h3",{attrs:{id:"数组的空位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组的空位"}},[t._v("#")]),t._v(" 数组的空位")]),t._v(" "),a("ol",[a("li",[t._v("Array(2)——['','']")]),t._v(" "),a("li",[t._v("es6 的数组遍历方法都会跳过空位，map 也会跳过，但是会保留空位")]),t._v(" "),a("li",[t._v("join()和 toString()会将空位视为 undefined，而 undefined 和 null 会被处理成空字符串")]),t._v(" "),a("li",[t._v("es6 新增方法会默认将空位转换为 undefined，for...of 循环则会遍历空位")])]),t._v(" "),a("h2",{attrs:{id:"对象的拓展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的拓展"}},[t._v("#")]),t._v(" 对象的拓展")]),t._v(" "),a("h3",{attrs:{id:"属性的简洁表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的简洁表示法"}},[t._v("#")]),t._v(" 属性的简洁表示法")]),t._v(" "),a("ol",[a("li",[t._v("允许在对象中直接写入变量，变量名作为键，变量值作为值")]),t._v(" "),a("li",[t._v("允许对象定义中的方法简写(省却:和 function)")])]),t._v(" "),a("h3",{attrs:{id:"属性名表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性名表达式"}},[t._v("#")]),t._v(" 属性名表达式")]),t._v(" "),a("ol",[a("li",[t._v("允许在对象字面量定义中，[表达式]作为键的写法")]),t._v(" "),a("li",[t._v('如果属性名表达式的键是一个对象变量，那它会自动转换为"[object Object]"名')])]),t._v(" "),a("h3",{attrs:{id:"新增-api-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新增-api-2"}},[t._v("#")]),t._v(" 新增 api")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Object.is(值 1,值 2)")]),a("br"),t._v("\n是否严格相等")]),t._v(" "),a("li",[a("strong",[t._v("Object.assign(target,source1,source2..)")]),a("br"),t._v("\n对象浅拷贝 - a.如果 target 传递 undefind 和 null 会报错 - b.除引用类型外，source 只接受字符串，其余忽略 - c.属性名为 Symbol 值的属性也会被 Object.assign 拷贝 - d.对于嵌套形式的对象形式，source 会覆盖整个键名对应的对象 - f.处理数组时会把数组视为对象，通过对应数组下标进行属性拷贝和覆盖 - e.无法正确拷贝 get 属性和 set 属性(undefined)")]),t._v(" "),a("li",[a("strong",[t._v("Object.setPrototypeOf(obj,prototype)")]),a("br"),t._v("\n为对象设置原型")]),t._v(" "),a("li",[a("strong",[t._v("Object.getPrototypeOf(obj)")]),a("br"),t._v("\n返回对象的原型")]),t._v(" "),a("li",[a("strong",[t._v("Object.getOwnPropertySymbols()")]),a("br"),t._v("\n返回 Symbol 属性键数组")]),t._v(" "),a("li",[a("strong",[t._v("Object.keys()")]),a("br"),t._v("\n返回键数组(可枚举)")]),t._v(" "),a("li",[a("strong",[t._v("Object.values()")]),a("br"),t._v("\n返回值数组(可枚举)")]),t._v(" "),a("li",[a("strong",[t._v("Object.entries()")]),a("br"),t._v("\n返回键值对数组")]),t._v(" "),a("li",[a("strong",[t._v("Object.getOwnPropertyDescriptors()")]),a("br"),t._v("\n返回指定对象所有自身属性的描述对象")])]),t._v(" "),a("h3",{attrs:{id:"对象的扩展运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的扩展运算符"}},[t._v("#")]),t._v(" 对象的扩展运算符")]),t._v(" "),a("ol",[a("li",[t._v('在解构赋值下，"...obj"等于剩余对象集')]),t._v(" "),a("li",[t._v('在解构赋值下，"...obj"必须处于最后一位')]),t._v(" "),a("li",[t._v('在对象使用中，"...obj"将对象拆散成单个键值对放入{}(可用于浅拷贝和对象合并)')]),t._v(" "),a("li",[t._v("在对象使用中，如果出现同名键值对，后面会覆盖前面的(适用于对象的扩展运算符)")]),t._v(" "),a("li",[t._v("在对象使用中，如果扩展运算符代表的对象键值对中有 get 取值函数，这个函数会执行")])]),t._v(" "),a("h3",{attrs:{id:"null-传导运算符·提案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-传导运算符·提案"}},[t._v("#")]),t._v(" Null 传导运算符·提案")]),t._v(" "),a("ol",[a("li",[t._v('通过符号"?."简化逻辑与，简化对象判断')]),t._v(" "),a("li",[a("code",[t._v("const firstName = (message&&message.body&&message.body.user&&message.body.user.firstName) || 'default'")])]),t._v(" "),a("li",[a("code",[t._v("const firstName = message?.body?.user?.firstName || 'default'")])])]),t._v(" "),a("h2",{attrs:{id:"symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[t._v("#")]),t._v(" Symbol")]),t._v(" "),a("h3",{attrs:{id:"使用注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用注意"}},[t._v("#")]),t._v(" 使用注意")]),t._v(" "),a("ol",[a("li",[t._v("一种新的原始数据类型，表示独一无二的值")]),t._v(" "),a("li",[t._v("可以接受一个字符串参数，用于 Symbol 值的描述区分"),a("code",[t._v('Symbol("xjh")')])]),t._v(" "),a("li",[t._v("不能用 new 操作符，也不能参与运算，类似于字符串")]),t._v(" "),a("li",[t._v("对象操作必须用中括号表示，用点运算符赋值无效——用 Symbol 值直接定义或赋值会转换为字符串键")]),t._v(" "),a("li",[t._v("如果 Symbol()的参数是一个对象，就会调用该对象的 toString 方法将其转为字符串，然后才生成一个 Symbol 值")]),t._v(" "),a("li",[t._v("Symbol 值可以强制类型转换为字符串，布尔值，数组和对象，但是不能转换为数")])]),t._v(" "),a("h3",{attrs:{id:"相关-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关-api"}},[t._v("#")]),t._v(" 相关 api")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v('Symbol.for("name")')]),t._v(" "),a("ul",[a("li",[t._v("a.如果存在登记为 name 的 symbol 值就取到，否则就创建")]),t._v(" "),a("li",[t._v("b.如果存在登记为 name 的 symbol 值，重复的调用只会得到同一个 symbol 值")]),t._v(" "),a("li",[t._v("c.Symbol.for 创建的 symbol 值是全局的，iframe 生成的可以在主页获取到")])])]),t._v(" "),a("li",[a("strong",[t._v('Symbol.keyFor("name")')]),t._v(" "),a("ul",[a("li",[t._v("a.返回已登记的 Symbol 类型值的 key")]),t._v(" "),a("li",[t._v('b.Symbol("name")创建的不属于登记返回，无法返回 key')])])])]),t._v(" "),a("h3",{attrs:{id:"内置-symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置-symbol"}},[t._v("#")]),t._v(" 内置 Symbol")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Symbol.hasInstance")]),t._v(" "),a("ul",[a("li",[t._v("a.等同于 instancsof，判断是否为该对象的实例时，会调用这个方法")]),t._v(" "),a("li",[t._v("b.foo instanceof Foo 在语言内部，实际调用的是 Foo[Symbol.hasInstance(foo)]")])])]),t._v(" "),a("li",[a("strong",[t._v("Symbol.isConcatSpreadable")]),t._v(" "),a("ul",[a("li",[t._v("a.等于一个布尔值，表示该对象使用 Array.prototype.concat()时，是否可以展开")]),t._v(" "),a("li",[t._v("b.数组的默认行为是可以展开的，Symbol.isConcatSpreadable 属性等于 true 或 undefined，都有这个效果")]),t._v(" "),a("li",[t._v("c.类似数组的对象也可以展开，但它的 Symbol.isConcatSpreadable 属性默认为 false，必须手动打开")])])]),t._v(" "),a("li",[a("strong",[t._v("Symbol.species")]),t._v(" "),a("ul",[a("li",[t._v("a.指向当前对象的构造函数，创造实例时，默认会调用这个方法")]),t._v(" "),a("li",[t._v("b.定义 Symbol.species 属性要采用 get 读取器，默认读取 this")])])]),t._v(" "),a("li",[a("strong",[t._v("Symbol.match")]),t._v(" "),a("ul",[a("li",[t._v("a.返回一个执行正则的 match 函数")]),t._v(" "),a("li",[t._v("b.当执行 str.match(obj)时，如果 obj 中存在该属性，则在会调用它")])])]),t._v(" "),a("li",[a("strong",[t._v("Symbol.replace")]),t._v(" "),a("ul",[a("li",[t._v("a.返回一个执行替换的 replace 函数")]),t._v(" "),a("li",[t._v('b.当执行 str.replace(obj,"World")时，如果 obj 中存在该属性，则在会调用它')])])]),t._v(" "),a("li",[a("strong",[t._v("Symbol.search")]),t._v(" "),a("ul",[a("li",[t._v("a.返回一个执行查找的 search 函数")]),t._v(" "),a("li",[t._v("b.当执行 str.search(obj)时，如果 obj 中存在该属性，则在会调用它")])])]),t._v(" "),a("li",[a("strong",[t._v("Symbol.split")]),t._v(" "),a("ul",[a("li",[t._v("a.返回一个执行查找的 search 函数")]),t._v(" "),a("li",[t._v("b.当执行 str.split(obj)时，如果 obj 中存在该属性，则在会调用它")])])]),t._v(" "),a("li",[a("strong",[t._v("Symbol.iterator")]),t._v(" "),a("ul",[a("li",[t._v("a.指向当前对象默认的遍历器方法")]),t._v(" "),a("li",[t._v("b.对象进行 for...of 循环时，会调用 Symbol.iterator 方法")])])]),t._v(" "),a("li",[a("strong",[t._v("Symbol.toPrimitive")]),t._v(" "),a("ul",[a("li",[t._v("a.返回将对象转为原始类型值的方法")]),t._v(" "),a("li",[t._v("b.Symbol.toPrimitive 被调用时，会接受一个字符串参数，表示当前运算的模式\n"),a("ul",[a("li",[t._v("Number：该场合需要转成数值")]),t._v(" "),a("li",[t._v("tring：该场合需要转成字符串")]),t._v(" "),a("li",[t._v("Default：该场合可以转成数值，也可以转成字符串")])])])])]),t._v(" "),a("li",[a("strong",[t._v("Symbol.toStringTag")]),t._v(" "),a("ul",[a("li",[t._v("a.返回一个类型字符串表示的函数")]),t._v(" "),a("li",[t._v("b.当执行 Object.prototype.toString 时，如果 obj 中存在该属性，则在会调用它")])])]),t._v(" "),a("li",[a("strong",[t._v("Symbol.unscopables")]),t._v(" "),a("ul",[a("li",[t._v("a.指向一个对象，指定了使用 with 关键字时，哪些属性会被 with 环境排除")]),t._v(" "),a("li",[t._v("b.被它指定的属性和方法将在 with 作用域中被忽略")])])])]),t._v(" "),a("h2",{attrs:{id:"set-和-map-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-和-map-数据结构"}},[t._v("#")]),t._v(" Set 和 Map 数据结构")]),t._v(" "),a("h3",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),a("ol",[a("li",[t._v("一种类似于数组的新数据结构，成员的值都是唯一的，不存在重复")]),t._v(" "),a("li",[t._v("Set 的构造函数接受数组(或具有 iterable 接口的其他数据结构)作为参数")]),t._v(" "),a("li",[t._v("Set 的值是跟内存地址绑定的，只要内存地址不一样，就视为两个值")]),t._v(" "),a("li",[t._v("Set 的实例默认可遍历，它的默认遍历器生成函数就是 values 方法")]),t._v(" "),a("li",[t._v("Set 的遍历顺序就是插入顺序，keys 方法和 values 方法的行为完全一致")]),t._v(" "),a("li",[t._v("实例属性和方法\n"),a("ul",[a("li",[t._v("size 返回成员个数")]),t._v(" "),a("li",[t._v("add() 添加某个值(返回 Set 实例)")]),t._v(" "),a("li",[t._v("delete() 删除某个值(返回布尔值)")]),t._v(" "),a("li",[t._v("has() 返回布尔值")]),t._v(" "),a("li",[t._v("clear() 清除所有成员(没有返回值)")]),t._v(" "),a("li",[t._v("keys() 返回键名遍历器")]),t._v(" "),a("li",[t._v("values() 返回键值遍历器")]),t._v(" "),a("li",[t._v("entries() 返回键值对遍历器")]),t._v(" "),a("li",[t._v("forEach() 带回调函数的遍历方法")])])])]),t._v(" "),a("h3",{attrs:{id:"weakset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakset"}},[t._v("#")]),t._v(" WeakSet")]),t._v(" "),a("ol",[a("li",[t._v("WeakSet 结构与 Set 类似，也是不重复的值的集合，没有 size 和 length 属性")]),t._v(" "),a("li",[t._v("构造函数的参数也只能接受数组或类似数组，但其成员必须为对象")]),t._v(" "),a("li",[t._v("WeakSet 中的对象都是弱引用，其指向的对象不计入垃圾回收机制")]),t._v(" "),a("li",[t._v("WeakSet 用于存储 DOM 节点时，如果节点从文档移除，会自动进行垃圾回收")]),t._v(" "),a("li",[t._v("实例属性和方法\n"),a("ul",[a("li",[t._v("add() 添加对象(返回实例)")]),t._v(" "),a("li",[t._v("delete() 删除某个值(返回布尔值)")]),t._v(" "),a("li",[t._v("has() 返回布尔值")])])])]),t._v(" "),a("h3",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),a("ol",[a("li",[t._v("一种类似于对象的新数据结构，但是键的范围不限于字符串，各种类型的值都可以当作键")]),t._v(" "),a("li",[t._v('构造函数接受数组(或具有 iterable 接口的其他数据结构)作为参数，数组项为代表键值项的数组（### "a",1）')]),t._v(" "),a("li",[t._v("Map 的键上是跟内存地址绑定的，只要内存地址不一样，就视为两个键")]),t._v(" "),a("li",[t._v("实例属性和方法\n"),a("ul",[a("li",[t._v("size 返回成员个数")]),t._v(" "),a("li",[t._v("set 添加键值对(返回 Set 实例)")]),t._v(" "),a("li",[t._v("get 返回值(无则 undefined)")]),t._v(" "),a("li",[t._v("has() 返回布尔值")]),t._v(" "),a("li",[t._v("delete() 删除某个值(返回布尔值)")]),t._v(" "),a("li",[t._v("clear() 清除所有成员(没有返回值)")]),t._v(" "),a("li",[t._v("keys() 返回键名的遍历器")]),t._v(" "),a("li",[t._v("values() 返回键值的遍历器")]),t._v(" "),a("li",[t._v("entries() 返回所有成员的遍历器")]),t._v(" "),a("li",[t._v("forEach() 遍历 Map 的所有成员")])])])]),t._v(" "),a("h3",{attrs:{id:"weakmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakmap"}},[t._v("#")]),t._v(" WeakMap")]),t._v(" "),a("ol",[a("li",[t._v("WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合，没有 size 和 length 属性")]),t._v(" "),a("li",[t._v("WeakMap 只接受对象作为键名(null 除外)，不接受其他类型的值作为键名")]),t._v(" "),a("li",[t._v("WeakMap 的键名都是弱引用，键名所指向的对象不计入垃圾回收机制")]),t._v(" "),a("li",[t._v("WeakMap 用于储存 dom 节点的临时数据时，如果节点从文档移除，会自动进行垃圾回收")]),t._v(" "),a("li",[t._v("实例属性和方法\n"),a("ul",[a("li",[t._v("get() 得到对象")]),t._v(" "),a("li",[t._v("set() 添加对象(返回实例)")]),t._v(" "),a("li",[t._v("delete() 删除某个值(返回布尔值)")]),t._v(" "),a("li",[t._v("has() 返回布尔值")])])])]),t._v(" "),a("h2",{attrs:{id:"proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[t._v("#")]),t._v(" Proxy")]),t._v(" "),a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("ol",[a("li",[t._v("Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，属于一种“元编程”")]),t._v(" "),a("li",[t._v("new Proxy(target, handler)接收 2 个参数，target 代表目标对象，handler 代表参数对象，用于定制行为")]),t._v(" "),a("li",[t._v("如果 handler 没有设置任何拦截，那就等同于直接指向原对象")]),t._v(" "),a("li",[t._v("如果一个属性不可配置和不可写，则该属性不能被代理，通过 Proxy 对象操作该属性会报错")])]),t._v(" "),a("h3",{attrs:{id:"实例方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-2"}},[t._v("#")]),t._v(" 实例方法")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("get()")])]),t._v(" "),a("li",[a("strong",[t._v("set()")])]),t._v(" "),a("li",[a("strong",[t._v("apply()")])]),t._v(" "),a("li",[a("strong",[t._v("has()")]),t._v("——对象是否具有某个属性\n"),a("ul",[a("li",[t._v("a.对 for...in 无效")])])]),t._v(" "),a("li",[a("strong",[t._v("construct()")]),t._v("——针对 new 命令\n"),a("ul",[a("li",[t._v("a.方法返回的必须是一个对象，否则会报错")])])]),t._v(" "),a("li",[a("strong",[t._v("deleteProperty()")]),t._v("——delete 操作\n"),a("ul",[a("li",[t._v("a.方法返回 false，属性就无法被 delete 删除")])])]),t._v(" "),a("li",[a("strong",[t._v("defineProperty()")])]),t._v(" "),a("li",[a("strong",[t._v("getOwnPropertyDescriptor()")])]),t._v(" "),a("li",[a("strong",[t._v("getPrototypeOf()")]),t._v(" "),a("ul",[a("li",[t._v("a.getPrototypeOf 方法的返回值必须是对象或者 null，否则会报错")])])]),t._v(" "),a("li",[a("strong",[t._v("isExtensible()")]),t._v("——是否锁定[不可拓展属性]\n"),a("ul",[a("li",[t._v("a.该方法只能返回布尔值，否则返回值会被自动转为布尔值")]),t._v(" "),a("li",[t._v("b.proxy(拦截函数返回值)与 target 的 Object.isExtensible()结果必须一致，否则报错")])])]),t._v(" "),a("li",[a("strong",[t._v("ownKeys()")]),t._v("——对象自身属性的读取操作\n"),a("ul",[a("li",[t._v("a.主要拦截 Object.keys()，Object.getOwnPropertyNames()和 Object.getOwnPropertySymbols()函数")]),t._v(" "),a("li",[t._v("b.ownKeys 方法返回的数组成员，只能是字符串，否则会报错")]),t._v(" "),a("li",[t._v("c.拦截 Object.keys 时，有三类属性会被 ownKeys 方法自动过滤——不存在的属性，不可遍历的属性和 Symbol 值属性")]),t._v(" "),a("li",[t._v("d.如果目标对象是不可扩展的，ownKeys 返回的数组之中必须包含原对象的所有属性，且不能包含多余的属性，否则报错")])])]),t._v(" "),a("li",[a("strong",[t._v("preventExtensions()")]),t._v("——锁定操作\n"),a("ul",[a("li",[t._v("a.该方法只能返回布尔值，否则返回值会被自动转为布尔值")]),t._v(" "),a("li",[t._v("b.只有目标对象不可扩展时，返回值才能为 true，否则会报错")])])]),t._v(" "),a("li",[a("strong",[t._v("setPrototypeOf()")]),t._v("——设置原型属性\n"),a("ul",[a("li",[t._v("a.该方法只能返回布尔值，否则返回值会被自动转为布尔值")]),t._v(" "),a("li",[t._v("b.如果目标对象不可扩展，则 setPrototypeOf 方法不得改变目标对象的原型")])])])]),t._v(" "),a("h3",{attrs:{id:"静态方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法-2"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Proxy.revocable()")]),t._v(" "),a("ul",[a("li",[t._v("a.返回一个可取消的实例")]),t._v(" "),a("li",[t._v("b.执行实例的 revoke 方法后，proxy 实例不可再访问，否则会报错")])])])]),t._v(" "),a("h3",{attrs:{id:"this-问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-问题"}},[t._v("#")]),t._v(" this 问题")]),t._v(" "),a("ol",[a("li",[t._v("在 Proxy 代理的情况下，目标对象内部的 this 关键字会指向 proxy 实例")]),t._v(" "),a("li",[t._v("有些原生对象的内部属性，只有通过正确的 this 才能拿到，所以 Proxy 也无法代理这些原生对象的属性")])]),t._v(" "),a("h2",{attrs:{id:"reflect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reflect"}},[t._v("#")]),t._v(" Reflect")]),t._v(" "),a("h3",{attrs:{id:"概述-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("ol",[a("li",[t._v("将 Object 对象的一些明显属于语言内部的方法放到 Reflect 对象上\n"),a("ul",[a("li",[t._v("现阶段，某些方法同时在 Object 和 Reflect 对象上部署，未来的新方法将只部署在 Reflect 对象上")])])]),t._v(" "),a("li",[t._v("修改某些 Object 方法的返回结果，让其变得更合理\n"),a("ul",[a("li",[t._v("Object.defineProperty 在无法定义属性时，会抛出一个错误，而 Reflect.defineProperty 则会返回 false")])])]),t._v(" "),a("li",[t._v("让之前是命令式的 Object 操作行为变成函数行为\n"),a("ul",[a("li",[a("code",[t._v("\"a\" in obj，delet obj['a']")]),t._v("变成"),a("code",[t._v("Reflect.has(obj, name)，Reflect.deleteProperty(obj, name)")])])])]),t._v(" "),a("li",[t._v("Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法")])]),t._v(" "),a("h3",{attrs:{id:"静态方法-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法-3"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("get()")])]),t._v(" "),a("li",[a("strong",[t._v("set()")]),t._v(" "),a("ul",[a("li",[t._v("a.如果 Proxy 对象和 Reflect 对象联合使用，通过 proxy 对 Reflect 传入 context 会触发 proxy 的 defineProperty 拦截")])])]),t._v(" "),a("li",[a("strong",[t._v("has()")])]),t._v(" "),a("li",[a("strong",[t._v("deleteProperty()")]),t._v(" "),a("ul",[a("li",[t._v("a.如果删除成功或者被删除的属性不存在，返回 true；删除失败，返回 false")])])]),t._v(" "),a("li",[a("strong",[t._v("construct()")]),t._v(" "),a("ul",[a("li",[t._v("a.等同于 new target(...args)，提供了一种不使用 new，来调用构造函数的方法")])])]),t._v(" "),a("li",[a("strong",[t._v("getPrototypeOf()")]),t._v(" "),a("ul",[a("li",[t._v("a.如果参数不是对象，Object.getPrototypeOf 会将这个参数转为对象，然后再运行，而 Reflect.getPrototypeOf 会报错")])])]),t._v(" "),a("li",[a("strong",[t._v("setPrototypeOf()")]),t._v(" "),a("ul",[a("li",[t._v("a.用于设置对象的"),a("strong",[t._v("proto")]),t._v("属性，返回第一个参数对象")]),t._v(" "),a("li",[t._v("b.如果第一个参数不是对象，Object.setPrototypeOf 会返回这个参数，而 Reflect.setPrototypeOf 会报错")])])]),t._v(" "),a("li",[t._v("**apply()")]),t._v(" "),a("li",[a("strong",[t._v("defineProperty()")])]),t._v(" "),a("li",[a("strong",[t._v("getOwnPropertyDescriptor()")]),t._v(" "),a("ul",[a("li",[t._v("a.如果第一个参数不是对象，Object.getOwnPropertyDescriptor 会返回 undefined，而 Reflect.getOwnPropertyDescriptor 会抛出错误")])])]),t._v(" "),a("li",[a("strong",[t._v("isExtensible()")]),t._v(" "),a("ul",[a("li",[t._v("a.对象是否可以拓展")]),t._v(" "),a("li",[t._v("b.如果参数不是对象，Object.isExtensible 会返回 false，因为非对象本来就是不可扩展的，而 Reflect.isExtensible 会报错")])])]),t._v(" "),a("li",[a("strong",[t._v("preventExtensions()")]),t._v(" "),a("ul",[a("li",[t._v("a.设置对象为不可拓展")]),t._v(" "),a("li",[t._v("b.如果参数不是对象，Object.preventExtensions 在 es5 环境报错，在 es6 环境返回传入的参数，而 Reflect.preventExtensions 会报错")])])]),t._v(" "),a("li",[a("strong",[t._v("ownKeys()")]),t._v(" "),a("ul",[a("li",[t._v("a.返回对象的所有属性(可枚举和不可枚举，可读和不可读)")])])])]),t._v(" "),a("h2",{attrs:{id:"promise-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-对象"}},[t._v("#")]),t._v(" Promise 对象")]),t._v(" "),a("h3",{attrs:{id:"promise-含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-含义"}},[t._v("#")]),t._v(" Promise 含义")]),t._v(" "),a("ol",[a("li",[t._v("Promise 是一个可以获取异步操作消息的对象，它提供了统一的 API，使得各种异步操作都可以用同样的方法进行处理")]),t._v(" "),a("li",[t._v("Promise 有三种状态 Pending，Resolved 和 Rejected，只有异步操作的结果，可以决定当前是哪一种状态")]),t._v(" "),a("li",[t._v("Promise 对象的状态不受外界影响，一旦状态改变，就不会再变，任何时候得到的都是这个结果")]),t._v(" "),a("li",[t._v("Promise 实例之间进行传递的时候，被传递实例会等待传递实例的状态改变后才进行回调状态操作")]),t._v(" "),a("li",[t._v("优点：\n"),a("ul",[a("li",[t._v("a.可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数")]),t._v(" "),a("li",[t._v("b.统一的接口使得控制异步操作更加容易")])])]),t._v(" "),a("li",[t._v("缺点：\n"),a("ul",[a("li",[t._v("a.无法取消 Promise，一旦新建它就会立即执行，无法中途取消")]),t._v(" "),a("li",[t._v("b.如果不设置回调函数，Promise 内部抛出的错误不会反应到外部")]),t._v(" "),a("li",[t._v("c.当处于 Pending 状态时，无法得知目前进展到哪一个阶段(刚刚开始还是即将完成)")])])])]),t._v(" "),a("h3",{attrs:{id:"基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[t._v("#")]),t._v(" 基本用法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" promise "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// success")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// failure")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"promise-prototype-then"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-then"}},[t._v("#")]),t._v(" Promise.prototype.then")]),t._v(" "),a("ol",[a("li",[t._v("then 方法会默认返回一个新 Promise 实例，因此可以进行链式操作")]),t._v(" "),a("li",[t._v("then 方法主动 return 的值会作为下一个 then 方法的参数")]),t._v(" "),a("li",[t._v("then 方法主动 return 的 new Promise 实例会被加入异步堆栈，只有其状态改变才会执行其链式的 then 回调")])]),t._v(" "),a("h3",{attrs:{id:"promise-prototype-catch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-catch"}},[t._v("#")]),t._v(" Promise.prototype.catch")]),t._v(" "),a("ol",[a("li",[t._v("Promise.prototype.catch 方法是.then(null,Rejected)的别名，用于指定发生错误时的回调函数")]),t._v(" "),a("li",[t._v("如果异步操作抛出错误，状态就会变为 Rejected，就会调用 catch 方法指定的回调函数")]),t._v(" "),a("li",[t._v("then 方法指定的回调函数，如果运行中抛出错误，也会被 catch 方法捕获")]),t._v(" "),a("li",[t._v("在 Promise 构造函数回调中直接调用 Rejected 方法会触发 catch 方法")]),t._v(" "),a("li",[t._v("catch 方法返回的还是一个 Promise 对象，因此后面还可以接着调用 then 方法")]),t._v(" "),a("li",[t._v("catch 方法之中，还能再抛出错误，当还存在下一个 catch 的时候就会捕获并执行")])]),t._v(" "),a("h3",{attrs:{id:"promise-all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-all"}},[t._v("#")]),t._v(" Promise.all")]),t._v(" "),a("ol",[a("li",[t._v("用于将多个 Promise 实例，包装成一个新的 Promise 实例")]),t._v(" "),a("li",[t._v("Promise.all 方法接受一个数组作为参数\n"),a("ul",[a("li",[t._v("a.如果数组由 Promise 实例组成，则会等待其中的 Promise 都完成时才会触发 Promise.all 实例的状态变化")]),t._v(" "),a("li",[t._v("b.如果数组不由 Promise 实例组成，就会直接调用 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理")])])]),t._v(" "),a("li",[t._v("只有 p1、p2、p3 的状态都完成，组合 p 的状态才会完成")]),t._v(" "),a("li",[t._v("只要 p1、p2、p3 之中有一个被 rejected，组合 p 的状态就变成 rejected（此时第一个被 reject 的实例返回值会传递给 p 的回调函数）")])]),t._v(" "),a("h3",{attrs:{id:"promise-race"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-race"}},[t._v("#")]),t._v(" Promise.race")]),t._v(" "),a("ol",[a("li",[t._v("同上")]),t._v(" "),a("li",[t._v("只要有一个 Promise 参数实例完成，就会调用 Promise.race 实例的状态变化，将率先完成的子 Promise 参数传递给 Promise.race 回调")])]),t._v(" "),a("h3",{attrs:{id:"promise-resolve"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-resolve"}},[t._v("#")]),t._v(" Promise.resolve")]),t._v(" "),a("ol",[a("li",[t._v("将现有对象转为 Promise 对象\n"),a("ul",[a("li",[t._v("a.当参数为 Promise 对象时，会原封不动返回该对象")]),t._v(" "),a("li",[t._v('b.当参数为带"then"键名方法的对象时，会将这个对象转为 Promise 对象，然后就立即执行该对象的 then 方法')]),t._v(" "),a("li",[t._v('c.当参数为非带"then"键名方法的对象时，Promise.resolve 方法返回一个新的 Promise 对象，状态为 Resolved')]),t._v(" "),a("li",[t._v("d.不带参数时，Promise.resolve 方法直接返回一个新的 Promise 对象，状态为 Resolved")])])])]),t._v(" "),a("h3",{attrs:{id:"promise-reject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-reject"}},[t._v("#")]),t._v(" Promise.reject")]),t._v(" "),a("ol",[a("li",[t._v("返回一个新的 Promise 实例，状态为 rejected，参数为错误信息")]),t._v(" "),a("li",[t._v("Promise.reject()方法的参数，会原封不动地作为 reject 或 catch 的回调参数")])]),t._v(" "),a("h3",{attrs:{id:"promise-try-提案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-try-提案"}},[t._v("#")]),t._v(" Promise.try 提案")]),t._v(" "),a("ol",[a("li",[t._v("对于那种可能是同步可能是异步的返回操作提供统一的处理方式，动态执行对应的同步/异步状态")]),t._v(" "),a("li",[t._v("database.users.get({id: userId})有可能报同步错误，有可能报异步错误")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Promise.try(database.users.get({id: userId})).then(...).catch(...)\n")])])]),a("h2",{attrs:{id:"iterator-和-for-of-循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterator-和-for-of-循环"}},[t._v("#")]),t._v(" Iterator 和 for...of 循环")]),t._v(" "),a("h3",{attrs:{id:"iterator-的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterator-的作用"}},[t._v("#")]),t._v(" Iterator 的作用")]),t._v(" "),a("ol",[a("li",[t._v("为各种数据结构，提供一个统一的、简便的访问接口(for...of)")]),t._v(" "),a("li",[t._v("使得数据结构的成员能够按某种次序排列")]),t._v(" "),a("li",[t._v("当使用 for...of 循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口")])]),t._v(" "),a("h3",{attrs:{id:"默认-iterator-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认-iterator-接口"}},[t._v("#")]),t._v(" 默认 Iterator 接口")]),t._v(" "),a("ol",[a("li",[t._v("部署了 Symbol.iterator 属性的数据结构，就称为部署了遍历器接口")]),t._v(" "),a("li",[t._v("原生具备 Iterator 接口的数据结构有：Array，Map，Set，String，TypedArray 和函数的 arguments 对象")])]),t._v(" "),a("h3",{attrs:{id:"调用场合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用场合"}},[t._v("#")]),t._v(" 调用场合")]),t._v(" "),a("ol",[a("li",[t._v("解构赋值，扩展运算符，yield*，for..of")])]),t._v(" "),a("h3",{attrs:{id:"遍历器对象的-return-和-throw-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历器对象的-return-和-throw-方法"}},[t._v("#")]),t._v(" 遍历器对象的 return 和 throw 方法")]),t._v(" "),a("ol",[a("li",[t._v("return 方法\n"),a("ul",[a("li",[t._v("调用场景——如果 for...of 循环提前退出(通常是因为出错，或者有 break 语句或 continue 语句)")]),t._v(" "),a("li",[t._v("部署场景——如果一个对象在完成遍历前，需要清理或释放资源，就可以部署 return 方法")])])]),t._v(" "),a("li",[t._v("throw 方法\n"),a("ul",[a("li",[t._v("主要是配合 Generator 函数使用，一般的遍历器对象用不到这个方法")])])])]),t._v(" "),a("h3",{attrs:{id:"for-of-循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-of-循环"}},[t._v("#")]),t._v(" for...of 循环")]),t._v(" "),a("ol",[a("li",[t._v("一个数据结构只要部署了 Symbol.iterator 属性，就被视为具有 iterator 接口，就可以用 for...of 循环遍历它的成员")]),t._v(" "),a("li",[t._v("for...of 循环内部调用的就是数据结构的 Symbol.iterator 方法")]),t._v(" "),a("li",[t._v("拥有 iterator 接口的数据结构——字符串，数组，类数组(arguments 和 DOM NodeList)，Generator 对象")]),t._v(" "),a("li",[t._v("for...of 更常用于数组循环，for...in 更常用于对象循环")])]),t._v(" "),a("h2",{attrs:{id:"generator-函数的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator-函数的语法"}},[t._v("#")]),t._v(" Generator 函数的语法")]),t._v(" "),a("h3",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),a("ol",[a("li",[t._v("语法上，function 关键字与函数名之间有一个星号*，函数体内部使用 yield 表达式")]),t._v(" "),a("li",[t._v("Generator 属于普通函数，调用不会立即执行，而是返回一个遍历器对象，需要调用 next()才能执行 yield 状态")]),t._v(" "),a("li",[t._v("Generator 函数就是遍历器生成函数，因此可以把 Generator 赋值给对象的 Symbol.iterator 属性，从而使得该对象具有 Iterator 接口，可以被 for...of 循环和扩展运算符转换")])]),t._v(" "),a("h3",{attrs:{id:"yield-表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yield-表达式"}},[t._v("#")]),t._v(" yield 表达式")]),t._v(" "),a("ol",[a("li",[t._v("yield 表达式如果用在一个表达式中，必须放在圆括号里面；如果用作函数参数或放在赋值表达式右边，可以不加括号")]),t._v(" "),a("li",[t._v("yield 表达式本身没有返回值，总是返回 undefined；")]),t._v(" "),a("li",[t._v("next 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值")]),t._v(" "),a("li",[t._v("由于 next 方法的参数表示上一个 yield 表达式的返回值，所以在第一次使用 next 方法时，传递参数是无效的")])]),t._v(" "),a("h3",{attrs:{id:"generator-prototype-throw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator-prototype-throw"}},[t._v("#")]),t._v(" Generator.prototype.throw()")]),t._v(" "),a("ol",[a("li",[t._v("Generator 函数返回的遍历器对象，都有一个 throw 方法，可以在函数体外抛出错误，然后在 Generator 函数体内捕获")]),t._v(" "),a("li",[t._v("throw 方法可以接受一个参数，该参数会被 catch 语句接收，建议抛出 Error 对象的实例")]),t._v(" "),a("li",[t._v("一旦 Generator 执行过程中抛出错误，且没有被内部捕获，就不会再执行下去了，Generator 函数默认结束")])]),t._v(" "),a("h3",{attrs:{id:"generator-prototype-return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator-prototype-return"}},[t._v("#")]),t._v(" Generator.prototype.return()")]),t._v(" "),a("ol",[a("li",[t._v("调用 return 方法后会终结 Generator 函数，返回值的 value 属性就是 return 方法的参数，没有即为 undefined")]),t._v(" "),a("li",[t._v("如果 Generator 函数内部有 try...finally 代码块，那么 return 方法会推迟到 finally 代码块执行完再执行")])]),t._v(" "),a("h3",{attrs:{id:"yield-表达式-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yield-表达式-2"}},[t._v("#")]),t._v(" yield* 表达式")]),t._v(" "),a("ol",[a("li",[t._v("yield* obj，如果 obj 是遍历器对象，将会遍历该对象的 yield，增加步长")]),t._v(" "),a("li",[t._v("任何数据结构只要有 Iterator 接口，就可以被 yield*遍历")])]),t._v(" "),a("h2",{attrs:{id:"generator-函数的异步应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator-函数的异步应用"}},[t._v("#")]),t._v(" Generator 函数的异步应用")]),t._v(" "),a("ol",[a("li",[t._v("Generator 函数将异步操作表示得很简洁，但是流程管理却不方便")]),t._v(" "),a("li",[t._v("解决方案\n"),a("ul",[a("li",[t._v("Thunk 函数\n"),a("ul",[a("li",[t._v("a.js 版本的 Thunk 函数方案是将多参数函数转换为单参数函数版本")]),t._v(" "),a("li",[t._v("b.可引入 node 模块，也可以自己书写，用于管理 Generator 函数流程")])])]),t._v(" "),a("li",[t._v("co 模块\n"),a("ul",[a("li",[t._v("a.js 版本的 co 函数方案是对 promise 的包装")])])])])])]),t._v(" "),a("h2",{attrs:{id:"async-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-函数"}},[t._v("#")]),t._v(" async 函数")]),t._v(" "),a("ol",[a("li",[t._v("Generator 函数的语法糖")]),t._v(" "),a("li",[t._v("改进特点\n"),a("ul",[a("li",[t._v("a.内置执行器 ——自动执行完，无需写 thunk 和 co 自执行方案")]),t._v(" "),a("li",[t._v("b.更好的语义")]),t._v(" "),a("li",[t._v("c.更广的适用性 ——异步等待执行，同步直接执行")]),t._v(" "),a("li",[t._v("d.返回 promise ——可用 then 方法指定下一步操作")])])]),t._v(" "),a("li",[t._v("基本语法\n"),a("ul",[a("li",[t._v("a.async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数")]),t._v(" "),a("li",[t._v("b.async 函数的 return 值会成为返回的 Promise 对象的值，then 方法的参数")]),t._v(" "),a("li",[t._v("c.遇到 await 就会等待异步/同步操作完成，然后接着执行函数体")]),t._v(" "),a("li",[t._v("d.await 命令后是一个 Promise 对象,如果不是则会被转成一个立即 resolve 的 Promise 对象")])])]),t._v(" "),a("li",[t._v("错误处理\n"),a("ul",[a("li",[t._v("a.async 函数内抛出错误，会导致返回的 promise 对象变为 reject 状态")]),t._v(" "),a("li",[t._v("b.只要一个 await 语句后面的 Promise 变为 reject，那么整个 async 函数都会中断执行，错误信息会传入 catch 方法")]),t._v(" "),a("li",[t._v("c.如果异步操作失败，却不希望中断后续异步操作，方法有：\n"),a("ul",[a("li",[t._v("1).使用 try...catch 语句，将 await 放入 try，catch 捕捉后会继续执行后续代码")]),t._v(" "),a("li",[t._v("2).对 await 后的 promise 对象增添 catch 方法进行错误捕捉，然后程序会继续执行后续代码")])])])])]),t._v(" "),a("li",[t._v("异步遍历器(提案)\n"),a("ul",[a("li",[t._v("a.异步遍历器的最大的语法特点就是，用遍历器的 next 方法，能返回一个 Promise 对象")]),t._v(" "),a("li",[t._v("b.对象的异步遍历器接口，部署在 Symbol.asyncIterator 属性上面")]),t._v(" "),a("li",[t._v("c.next 方法可以连续调用，不必等到上一步 Promise 对象 resolve 以后再调用；next 方法会累积起来，自动按照每一步的顺序运行下去")])])]),t._v(" "),a("li",[t._v("for await...of(提案)\n"),a("ul",[a("li",[t._v("a.for await...of 循环的一个用途，是部署了 asyncIterable 操作的异步接口，可以直接放入这个循环")]),t._v(" "),a("li",[t._v("b.for...of 自动调用遍历器的 next 方法，得到一个 Promise 对象；await 用来处理这个 Promise 对象，一旦 resolve，就把得到的值传入循环体")]),t._v(" "),a("li",[t._v("c.for await...of 循环也可以用于同步遍历器")])])]),t._v(" "),a("li",[t._v("异步 Generator 函数(提案)\n"),a("ul",[a("li",[t._v("a.async 函数与 Generator 函数的结合，await 后面的操作会返回 Promise 对象")]),t._v(" "),a("li",[t._v("b.普通的 async 函数返回的是一个 Promise 对象，而异步 Generator 函数返回的是一个异步 Iterator 对象，通过调用 next 方法来返回可操作的 Promise 对象")]),t._v(" "),a("li",[t._v("c.yield *后面同样可以继续跟异步 Generator 函数")])])])]),t._v(" "),a("h2",{attrs:{id:"class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class"}},[t._v("#")]),t._v(" Class")]),t._v(" "),a("h3",{attrs:{id:"class-基本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-基本语法"}},[t._v("#")]),t._v(" Class 基本语法")]),t._v(" "),a("ol",[a("li",[t._v("类的数据类型就是函数，类本身指向构造函数")]),t._v(" "),a("li",[t._v("类内部所有定义的方法都是不可枚举的")]),t._v(" "),a("li",[t._v("类本身和内部的属性方法可以采用变量来声明和表示")]),t._v(" "),a("li",[t._v("不使用 new 的类调用会报错")]),t._v(" "),a("li",[t._v("当 constructor 未被显示添加，空的 constructor 会被默认添加")]),t._v(" "),a("li",[t._v("class 声明不存在变量提升")]),t._v(" "),a("li",[t._v("采用 class 表达式，可以写出立即执行的 class")]),t._v(" "),a("li",[t._v("类和模块的内部，默认就是严格模式")]),t._v(" "),a("li",[t._v("class 的 get 和 set 函数也定义在原型上")])]),t._v(" "),a("h3",{attrs:{id:"class-的静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-的静态方法"}},[t._v("#")]),t._v(" Class 的静态方法")]),t._v(" "),a("ol",[a("li",[t._v("父类的静态方法，可以被子类继承——子类调用父类静态方法")]),t._v(" "),a("li",[t._v("子类也可以通过 super，在静态方法中调用父类的静态方法")])]),t._v(" "),a("h3",{attrs:{id:"class-的静态属性和实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-的静态属性和实例属性"}},[t._v("#")]),t._v(" Class 的静态属性和实例属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("es6用法"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myProp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 静态属性")]),t._v("\nMyClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("属性 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("es7提案"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例属性——实例可以取到")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  myProp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myProp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 42")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 静态属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" myProp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myProp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 42")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"class-的私有属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-的私有属性"}},[t._v("#")]),t._v(" class 的私有属性")]),t._v(" "),a("ul",[a("li",[t._v("es7 提案\n"),a("ul",[a("li",[t._v("a.私有属性用#表示，也用于表示私有方法，在类的外包无法访问")]),t._v(" "),a("li",[t._v("b.私有属性可以指定初始值，在构造函数执行时进行初始化")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    #b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    #c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("#sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" #a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" #b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printSum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("#sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        #a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        #b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"new-target-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-target-属性"}},[t._v("#")]),t._v(" new.target 属性")]),t._v(" "),a("ol",[a("li",[t._v("返回 new 命令作用的那个构造函数，如果是 class 内部调用则返回当前 class")]),t._v(" "),a("li",[t._v("new.target 只适用于构造函数或 class 内部的 constructor 方法")]),t._v(" "),a("li",[t._v("如果构造函数不是通过 new 命令调用的，则 new.target 会返回 undefined")]),t._v(" "),a("li",[t._v("可以用来确定构造函数是怎么调用的，也可以用其做不可实例化的抽象类")])]),t._v(" "),a("h2",{attrs:{id:"class-的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-的继承"}},[t._v("#")]),t._v(" Class 的继承")]),t._v(" "),a("h3",{attrs:{id:"class-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-继承"}},[t._v("#")]),t._v(" Class 继承")]),t._v(" "),a("ul",[a("li",[t._v("基本用法\n"),a("ul",[a("li",[t._v("1.存在继承关系后，constructor 内必须执行 super()操作，否则会报无 this 的错误")]),t._v(" "),a("li",[t._v("2.子类实例的构建是基于对父类实例加工，super()相当于对子类进行父类.call(this)")]),t._v(" "),a("li",[t._v("3.super 返回父类实例后，植入子类原型属性和 constructor，然后再接入到子类原型上")])])]),t._v(" "),a("li",[t._v("super 关键字\n"),a("ul",[a("li",[t._v("1.super 用作函数时，必须用在 constructor 之内，否则会报错")]),t._v(" "),a("li",[t._v("2.super 用作对象时，在普通方法中指向父类原型对象，在静态方法中指向父类")]),t._v(" "),a("li",[t._v("3.通过 super 调用父类的方法时，相当于父级原型调用该方法，但是 super 会绑定子类的 this")]),t._v(" "),a("li",[t._v("4.通过 super 对某个属性赋值时，因为 super 绑定了子类的 this，因而会赋值到子类属性上，但是调用时依然会在父级原型查找")]),t._v(" "),a("li",[t._v("5.super 并不是动态绑定的，而是在声明时“静态”绑定的")])])]),t._v(" "),a("li",[t._v("原生构造函数的继承\n"),a("ul",[a("li",[t._v("1.es5 之前原生构造函数无法用 this 去绑定，导致拿不到其内部实例属性，无法实现真正继承")]),t._v(" "),a("li",[t._v("2.es6 通过 extends 继承可以自定义原生数据结构，实现子类的真正继承和拓展能力\n3.super 传参对 Object 原生类型无效，es6 规定 Object 构造函数会忽略参数")])])])]),t._v(" "),a("h2",{attrs:{id:"decorator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decorator"}},[t._v("#")]),t._v(" Decorator")]),t._v(" "),a("h3",{attrs:{id:"基本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[t._v("#")]),t._v(" 基本语法")]),t._v(" "),a("ol",[a("li",[t._v("书写上，置于要修改的类和方法之上")]),t._v(" "),a("li",[t._v("只能用于类和类的方法，不能用于函数，因为存在函数提升")]),t._v(" "),a("li",[t._v("不管是修饰类还是修饰方法，都支持多个修饰器")]),t._v(" "),a("li",[t._v("修饰器对行为的改变，发生在编译器，而不是运行时，其本质是编译时执行函数")])]),t._v(" "),a("h3",{attrs:{id:"类的修饰"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的修饰"}},[t._v("#")]),t._v(" 类的修饰")]),t._v(" "),a("ul",[a("li",[t._v("当用于修饰类的时候，它的第一个参数代表所要修饰的目标类")])]),t._v(" "),a("h3",{attrs:{id:"方法的修饰"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法的修饰"}},[t._v("#")]),t._v(" 方法的修饰")]),t._v(" "),a("ol",[a("li",[t._v("修饰器不仅可以修饰类，还可以修饰类的方法")]),t._v(" "),a("li",[t._v("修饰方法的时候，接受三个参数(target, name, descriptor)")]),t._v(" "),a("li",[t._v("当多个修饰器一起用时，遵循先从外到内进入，然后由内向外执行")])]),t._v(" "),a("h2",{attrs:{id:"module-的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module-的语法"}},[t._v("#")]),t._v(" Module 的语法")]),t._v(" "),a("h3",{attrs:{id:"export-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-命令"}},[t._v("#")]),t._v(" export 命令")]),t._v(" "),a("ol",[a("li",[t._v("export 命令规定的是对外的接口，因此必须与模块内部的变量建立一一对应关系"),a("code",[t._v("export { 变量名 }")])]),t._v(" "),a("li",[t._v("export 语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值一一定时器动态改变值的情况")]),t._v(" "),a("li",[t._v("export 命令可以出现在模块的任何位置，只要处于模块顶层就可以，如果处于块级作用域内就会报错一一 import 命令同样如此")])]),t._v(" "),a("h3",{attrs:{id:"import-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-命令"}},[t._v("#")]),t._v(" import 命令")]),t._v(" "),a("ol",[a("li",[t._v("import 命令具有提升效果，会提升到整个模块的头部首先执行，因为 import 命令是属于编译阶段执行")]),t._v(" "),a("li",[t._v("由于 import 是静态执行，所以不能使用表达式和变量这些只有在运行时才能得到结果的语法结构")]),t._v(" "),a("li",[t._v("import 语句会执行所加载的模块，因此可以有如下的写法")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",[a("li",[t._v("多次重复执行同一句 import 语句，那么只会执行一次，而不会执行多次")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_module"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_module"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"模块的整体加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块的整体加载"}},[t._v("#")]),t._v(" 模块的整体加载")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" 模块名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./文件名"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"export-default-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-default-命令"}},[t._v("#")]),t._v(" export default 命令")]),t._v(" "),a("ol",[a("li",[t._v("为模块指定默认输出时，import 命令可以为模块指定任意名字，且不需要用{}括号包起来")]),t._v(" "),a("li",[t._v("模块内部的声明函数在外部是无效的，加载的时候视同为匿名函数进行加载")]),t._v(" "),a("li",[t._v("一个模块只能有一个默认输出")]),t._v(" "),a("li",[t._v("export default 本质上就是一个叫做 default 的变量或方法，因此可以用 as 语句进行改名")]),t._v(" "),a("li",[a("code",[t._v("var a = 1; export default a;")]),t._v("——将变量 a 的值赋给变量 default，因此"),a("code",[t._v("export default 1")]),t._v("也是可以的")]),t._v(" "),a("li",[t._v("同时输入默认方法和其他变量"),a("code",[t._v("import abc,{ each } from 'lodash'")])])]),t._v(" "),a("h3",{attrs:{id:"export-与-import-的复合写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-与-import-的复合写法"}},[t._v("#")]),t._v(" export 与 import 的复合写法")]),t._v(" "),a("p",[a("strong",[t._v("如果在一个模块之中，先输入后输出同一个模块，import 语句可以与 export 语句写在一起")])]),t._v(" "),a("ul",[a("li",[t._v("写法 1·默认用法")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_module"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等同于")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_module"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("写法 2·整体输出")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my_module'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t——会忽略my_module模块的"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v("\n")])])]),a("ul",[a("li",[t._v("写法 3·默认接口")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("写法 4·接口改名")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" myFoo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my_module"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("写法 5·具名接口改为默认接口")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" es6 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./someModule"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("写法 6·默认接口改为具名接口")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" es6 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./someModule"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"import-提案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-提案"}},[t._v("#")]),t._v(" import()提案")]),t._v(" "),a("ol",[a("li",[t._v("属于运行时执行的动态加载，区别于 import 的静态加载")]),t._v(" "),a("li",[t._v("import()函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用")]),t._v(" "),a("li",[t._v("import()函数与所加载的模块没有静态连接关系，这点也是与 import 语句不相同")]),t._v(" "),a("li",[t._v("import()类似于 Node 的 require 方法，区别主要是前者是异步加载，后者是同步加载")]),t._v(" "),a("li",[t._v("import()返回一个 Promise 对象，并允许模块路径动态生成——import(f()).then(...)")])]),t._v(" "),a("h2",{attrs:{id:"module-的加载实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module-的加载实现"}},[t._v("#")]),t._v(" Module 的加载实现")]),t._v(" "),a("h3",{attrs:{id:"游览器加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#游览器加载"}},[t._v("#")]),t._v(" 游览器加载")]),t._v(" "),a("ol",[a("li",[t._v("script 标签中 defer 和 async 的区别——defer 是渲染完再执行，async 是下载完就执行——即不能保证执行顺序")]),t._v(" "),a("li",[t._v("浏览器加载 ES6 模块也使用"),a("code",[t._v("<script>")]),t._v('标签，但要加入 type="module"属性，效果等同于 defer\n'),a("ul",[a("li",[t._v("a.代码运行在模块作用域，顶层变量对外不可见")]),t._v(" "),a("li",[t._v('b.默认采用严格模式，不管有无"use strict"')]),t._v(" "),a("li",[t._v("c.模块之中，import 和 export 指令对应模块时，.js 后缀不能省略")]),t._v(" "),a("li",[t._v("d.模块顶层 this 为 undefined")])])])]),t._v(" "),a("h3",{attrs:{id:"es6-模块与-commonjs-模块的差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块与-commonjs-模块的差异"}},[t._v("#")]),t._v(" es6 模块与 commonjs 模块的差异")]),t._v(" "),a("ol",[a("li",[t._v("commonjs 模块输出的是一个值的拷贝，es6 模块输出的是值的引用")]),t._v(" "),a("li",[t._v("commonjs 模块是运行时加载，es6 模块是编译时输出接口")]),t._v(" "),a("li",[t._v("commonjs 顶层 this 指向当前模块，es6 顶层 this 指向 undefined")]),t._v(" "),a("li",[t._v("es6 模块是动态引用，不会缓存值，模块里面的变量绑定其所在的模块，意味着可以获取模块的动态变化")]),t._v(" "),a("li",[t._v("es6 输入的模块变量，只是一个“符号连接”，属于只读的，对它进行重新赋值会报错")]),t._v(" "),a("li",[t._v("export 通过接口输出的是同一个值，因此不同的脚本加载这个接口，得到的都是同样的实例")])]),t._v(" "),a("h3",{attrs:{id:"node-加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-加载"}},[t._v("#")]),t._v(" node 加载")]),t._v(" "),a("ol",[a("li",[t._v("node 中采用两套方案进行加载，es6 模块和 commonjs 采用各自的加载方案")]),t._v(" "),a("li",[t._v('如果不输出任何接口，但希望被 node 认为是 es6 模块，可以在脚本中写"export {}"')])]),t._v(" "),a("h3",{attrs:{id:"import-加载-commonjs-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-加载-commonjs-模块"}},[t._v("#")]),t._v(" import 加载 commonjs 模块")]),t._v(" "),a("ol",[a("li",[t._v("import 加载 commonjs 模块，node 会自动将 module.exports 属性当作模块的默认输出，即等同于 export default")]),t._v(" "),a("li",[t._v("import 加载 commonjs 模块时，commonjs 模块的输出缓存机制依然有效，被引入模块内部的变化不会更新到引入模块")]),t._v(" "),a("li",[t._v("import {readfile} from 'fs'报错\n原因——fs 是 commonjs 格式，只有在运行时才能确定 readfile 接口，而 import 命令要求编译时就确定这个接口\n解决办法——改为整体输入")])]),t._v(" "),a("h3",{attrs:{id:"require-加载-es6-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#require-加载-es6-模块"}},[t._v("#")]),t._v(" require 加载 es6 模块")]),t._v(" "),a("ol",[a("li",[t._v("采用 require 命令加载 es6 模块时，es6 模块的所有输出接口会成为输入对象的属性")]),t._v(" "),a("li",[t._v("require 加载 es6 模块依然存在缓存机制，被引入模块内部的变化不会更新到引入模块")])]),t._v(" "),a("h3",{attrs:{id:"循环加载·commonjs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环加载·commonjs"}},[t._v("#")]),t._v(" 循环加载·commonjs")]),t._v(" "),a("ol",[a("li",[t._v("commonjs 的重要特性就是加载时执行，即脚本代码在 require 的时候就会执行，然后在内存生成一个对象")]),t._v(" "),a("li",[t._v("commonjs 模块无论加载多少次，都只会在第一次加载时运行一次，以后再执行加载，都只会到缓存中取值，返回第一次运行结果")])]),t._v(" "),a("h3",{attrs:{id:"循环加载·es6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环加载·es6"}},[t._v("#")]),t._v(" 循环加载·es6")]),t._v(" "),a("ol",[a("li",[t._v("es6 模块是动态引用，如果使用 import 从一个模块加载变量(即 import foo from 'foo')，那些变量不会被缓存，而是成为一个\n指向被加载模块的引用，意味着可以取到值得变化")])])])}),[],!1,null,null,null);s.default=r.exports}}]);