(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{552:function(e,t,r){"use strict";r.r(t);var a=r(34),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"vue-巨量表单型内容表格优化实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue-巨量表单型内容表格优化实践"}},[e._v("#")]),e._v(" vue 巨量表单型内容表格优化实践")]),e._v(" "),r("blockquote",[r("p",[e._v("项目开发完成的时间是 19 年中旬，但是由于我个人对应用经验总结的疏懒和无兴趣，一直未曾记录，但感觉还是值得一记，遂在今日补上（2020 年 11 月 14 日），加补一次（2021 年 05 月 31 日）。")])]),e._v(" "),r("h2",{attrs:{id:"背景说明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#背景说明"}},[e._v("#")]),e._v(" 背景说明")]),e._v(" "),r("p",[e._v("该项目开始于 18 年 2 月，19 年 3 月份开始针对表格性能进行页面重构，6 月份最终完成。")]),e._v(" "),r("h3",{attrs:{id:"技术栈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#技术栈"}},[e._v("#")]),e._v(" 技术栈")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue"),r("OutboundLink")],1),e._v(" + "),r("a",{attrs:{href:"https://router.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-router"),r("OutboundLink")],1),e._v(" + "),r("a",{attrs:{href:"https://vuex.vuejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("vuex"),r("OutboundLink")],1),e._v(" + "),r("a",{attrs:{href:"https://element.eleme.io/#/zh-CN/component/installation",target:"_blank",rel:"noopener noreferrer"}},[e._v("element ui"),r("OutboundLink")],1),e._v(" + "),r("a",{attrs:{href:"https://d2.pub/zh/doc/d2-admin/",target:"_blank",rel:"noopener noreferrer"}},[e._v("d2-admin"),r("OutboundLink")],1)]),e._v(" "),r("h3",{attrs:{id:"业务场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#业务场景"}},[e._v("#")]),e._v(" 业务场景")]),e._v(" "),r("p",[e._v("这是一个包含进销存模块的中后台系统，其中采购和销售模块在做单的时候，会包含很多明细信息，它们作为单据的子信息存在，这样的子信息会有很多，销售模块下的某些单据还需要支持 excel 导入，一条业务单据，可能会出现上百条左右的信息数据，前端界面上通过表单型表格进行展现。")]),e._v(" "),r("h3",{attrs:{id:"业务图示"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#业务图示"}},[e._v("#")]),e._v(" 业务图示")]),e._v(" "),r("p",[e._v("这个是销售模块下的零购销售主页，点击单据行后，底部弹出从表信息")]),e._v(" "),r("p",[r("img",{attrs:{src:"/code/article/performance/1.png",alt:""}})]),e._v(" "),r("p",[e._v("点击表格顶部的"),r("strong",[e._v("新增")]),e._v("按钮，可以新增单据行；点击表格行右侧的"),r("strong",[e._v("编辑")]),e._v("按钮，可以编辑单据行。")]),e._v(" "),r("p",[e._v("这里以编辑为例，随便点击一行的编辑后，进入到子信息内页，可以进行单据内容明细编辑，页面如下：")]),e._v(" "),r("p",[r("img",{attrs:{src:"/code/article/performance/2.png",alt:""}})]),e._v(" "),r("p",[e._v("如图所示，点击表格顶部的"),r("strong",[e._v("插行")]),e._v("按钮，可以插入表格行；点击"),r("strong",[e._v("引合同")]),e._v("，可以引入 excel，导入批量数据；点击表格行右侧的"),r("strong",[e._v("复制")]),e._v("按钮，可以复制一行。")]),e._v(" "),r("h2",{attrs:{id:"性能问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#性能问题"}},[e._v("#")]),e._v(" 性能问题")]),e._v(" "),r("h3",{attrs:{id:"发现问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#发现问题"}},[e._v("#")]),e._v(" 发现问题")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("这个业务场景下的页面可以支持插入大量数据，某些 excel 引入的明细信息有可能上百条。")])]),e._v(" "),r("li",[r("p",[e._v("最开始插入 10 多条数据的时候，体验都还很流畅，但是当插行达到 30 行以上后，开始出现了延迟和卡顿。")])]),e._v(" "),r("li",[r("p",[e._v("这里放上之前测试的数据图——均是等待 20 秒，内存稳定后的情况")])])]),e._v(" "),r("p",[r("img",{attrs:{src:"/code/article/performance/3.png",alt:""}})]),e._v(" "),r("h3",{attrs:{id:"问题分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#问题分析"}},[e._v("#")]),e._v(" 问题分析")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("我们都知道，在 vue 里面，一切可视的界面原件都是组件化构成的，element ui 封装了一系列可视化的 vue 组件，每个组件都有它独立的生命周期，运行逻辑和内存绑定。")])]),e._v(" "),r("li",[r("p",[e._v("在这个页面上比较突出的组件就是下拉，体现在单据表格中则是一行拥有 6 个下拉组件，若是表格数据达到 100 行，则光是表格内的下拉就拥有了 600 个。")])]),e._v(" "),r("li",[r("p",[e._v("然后在表格内的品名，材质，规格和产地下拉又比较特殊，属于联动数据，它并不是固定有限的少量数据，其中甚至存在几百条数据，我最后将其封装成了 ajax 搜索版，支持滚动翻页，逐步加载。")])]),e._v(" "),r("li",[r("p",[e._v("翻看 element 的 el-select 组件源码就会发现，它封装了自身的 el-input 组件，做了多选处理，也就是说，每个下拉行即是一个 input 组件，这样下来，整个表格内的组件已经非常多了。")])]),e._v(" "),r("li",[r("p",[e._v("值得一说的是，select 下拉虽然支持远程请求搜索，但是并没有抛出内部滚动的 scroll 事件函数，因此我在做 ajax 搜索翻页封装的时候，改动了下源码")])]),e._v(" "),r("li",[r("p",[e._v("当我将其中的 input 和 select 组件全部去除，以纯文字项做表格行插入时，到 100 条左右后，js 堆内存总共是 300M 左右，总体来讲也还行，只是纯滚动的话。")])]),e._v(" "),r("li",[r("p",[e._v("值得强调的是，当我去掉表格内的 fixed=right 属性时，也就是表格右侧的列固定后，内存直接下降了 150M，翻看源码才发现为了实现这个效果，内部做了浮层表格")])]),e._v(" "),r("li",[r("p",[e._v("从操作系统的角度而言，游览器作为一个桌面应用，它向系统申请到了一定的内存容量，而每个页面的 tab 卡作为进程，又向游览器申请了一定的运行内存，大于可运行的内存指标就会出现不流畅和卡顿。")])]),e._v(" "),r("li",[r("p",[e._v("目前来看，会知觉到不流畅的 js 的堆大小为 200M 以上，如果你电脑配置比较小或者老旧，可能会提早感知到这种卡顿和不畅。")])]),e._v(" "),r("li",[r("p",[e._v("所以，问题主要集中在这种场景下，包含大量表单和下拉的巨量表格行插入，会使得单个 tab 卡进程的内存占用达到一个卡顿峰值，我们需要进行优化。")])])]),e._v(" "),r("h2",{attrs:{id:"优化实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优化实践"}},[e._v("#")]),e._v(" 优化实践")]),e._v(" "),r("ul",[r("li",[e._v("这个优化实践有一个时间阶段性，大致的优化过程如下：")])]),e._v(" "),r("h3",{attrs:{id:"第一波优化-删减源码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第一波优化-删减源码"}},[e._v("#")]),e._v(" 第一波优化（删减源码）")]),e._v(" "),r("ul",[r("li",[e._v("翻看 element table，select 和 input 源码，将未用到的一些功能都注销了，但是效果并不明显。")])]),e._v(" "),r("h3",{attrs:{id:"第二波优化-简易虚拟列表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第二波优化-简易虚拟列表"}},[e._v("#")]),e._v(" 第二波优化（简易虚拟列表）")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("当时社区已经有了虚拟列表的方案，版本实现为 react，主要是针对展示列表的显示，内容也是纯文字型，针对 vue 和 element 这种表格行滚动我并未看到有实践方案。")])]),e._v(" "),r("li",[r("p",[e._v("针对这种情况，我自己就简单实现了一个，控制视区内容有限渲染，但是滚动效果并不是很流畅，内存和卡顿倒是实现了，最终方案被业务方 pass。")])])]),e._v(" "),r("h3",{attrs:{id:"第三波优化-重写-el-input-select-组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第三波优化-重写-el-input-select-组件"}},[e._v("#")]),e._v(" 第三波优化（重写 el-input/select 组件）")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("我花了一周时间，用 vue 重写了 el-input 和 el-select 组件，实现了 element 界面样式，必要功能和 api， 使用上达到 95%的还原，内部也做好了对 element 表单验证的适配，基本达到了无缝对接，只有 1~2 个属性的增改。")])]),e._v(" "),r("li",[r("p",[e._v("然后进行了试验测试，效果如下——30 条时，内存为 128M；100 条时，内存为 394M")])])]),e._v(" "),r("p",[r("img",{attrs:{src:"/code/article/performance/4.png",alt:""}})]),e._v(" "),r("ul",[r("li",[e._v("虽然在以前 100 数据时的基础上减去了一大半的内存，但是接近 400M 的内存依然卡顿无比，方案作罢。")])]),e._v(" "),r("h3",{attrs:{id:"第四波优化-jspreadsheets-库-2019-06"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第四波优化-jspreadsheets-库-2019-06"}},[e._v("#")]),e._v(" 第四波优化（JSpreadsheets 库-2019.06）")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("我们组长找到了一个 excel 插件，叫 JSpreadsheets，直接引入后，内存和第四波优化一致，但是滚动流畅。")])]),e._v(" "),r("li",[r("p",[e._v("唯一的问题是界面偏 excel 风格，然后代码体积较大，有 1w+行 js 代码，2k 行 css 代码，纯原生 js 代码量巨大，改动起来也比较费事。")])]),e._v(" "),r("li",[r("p",[e._v("最后经过多方讨论，采用了这个插件将所有表格单据进行重构，使用上引入了一个对这个插件的 vue 封装套件，然后样式做了些调整，最后改动完的界面如下：")])])]),e._v(" "),r("p",[r("img",{attrs:{src:"/code/article/performance/7.png",alt:""}})]),e._v(" "),r("h3",{attrs:{id:"第五波优化-pl-table-库-2020-03"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第五波优化-pl-table-库-2020-03"}},[e._v("#")]),e._v(" 第五波优化（pl-table 库 2020.03）")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("随着时间的推移，业务方也觉得 excel 表格方案虽然不影响使用，但是体验感比较生硬，可调整性有限，遂出现替改的声音。")])]),e._v(" "),r("li",[r("p",[e._v("后来我偶尔在社区发现了比较成熟的针对 element 表格的虚拟表格方案，也就是 pl-table 组件，应用后如下图所示**（30 条时，内存为 55M；100 条时，内存为 247M）**")])])]),e._v(" "),r("p",[r("img",{attrs:{src:"/code/article/performance/5.png",alt:""}})]),e._v(" "),r("ul",[r("li",[e._v("然后当去除右侧固定的 fixed=right 属性后，内存又降了一波**（30 条时，内存为 52.5M；100 条时，内存为 100M）**")])]),e._v(" "),r("p",[r("img",{attrs:{src:"/code/article/performance/6.png",alt:""}})]),e._v(" "),r("ul",[r("li",[r("p",[e._v("虽然内存已经降至可接受范围，但是每次滚动的时候，还是会觉得不太流畅，CPU 容易飙高，内存也逐步增加，停顿后逐步下降。")])]),e._v(" "),r("li",[r("p",[e._v("最后经过讨论，这种替改方案还是不满足要求。")])])]),e._v(" "),r("h3",{attrs:{id:"第六波优化-原生-js-插件-2021-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第六波优化-原生-js-插件-2021-4"}},[e._v("#")]),e._v(" 第六波优化（原生 js 插件 2021.4）")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("这波优化是基于 JSpreadsheets 插件太过庞大，可定制性和灵活度不够，考虑到后期项目类似的业务要求，在诸多方案无果后，遂打算用原生 js 实现这种业务插件。")])]),e._v(" "),r("li",[r("p",[e._v("我个人历时 1 个月，完成了插件初版，实现了原有业务需要的全部功能，然后断断续续 1 个月优化了插件的功能 bug 和性能，成功替换了一个项目内的表格页面，通过了测试组的项目测试。")])])]),e._v(" "),r("h2",{attrs:{id:"实践总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实践总结"}},[e._v("#")]),e._v(" 实践总结")]),e._v(" "),r("ul",[r("li",[r("p",[r("strong",[e._v("目前的插件代码个人并不满意")]),e._v("。因为前期碍于快速出成果，开发中很难很好地兼顾设计与进度，很多代码区块在可读性和性能上都还可以进行优化，尤其是内置的 zepto 还没有剥离，存在原生和$混写的情况，尽管我剥离了 zepto 的无用模块，同时，很多业务场景和性能优化是相悖的，你需要想各种办法来调整，改善和规避，需要时间去思考和拿捏。总的来说，想快而好确实比较难，后面有时间再优化了。")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("开发这个原生表格控件让我收获颇丰")]),e._v("。在开发过程中，我参考了一些插件的拆分设计，借鉴并用 es6 的方式实现了，同时在具体的功能实现中，我参看了 element-table 源码的实现方式和细节，借鉴了很多思路方法；在优化过程中，又充分发挥了之前学的游览器原理的知识，能分析并找到性能瓶颈，知道如何调整和优化它。")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("虚拟列表技术可以解决问题")]),e._v("。到目前，虚拟列表的技术已经越来越成熟，在开发表格的过程中，我有一次好奇的看了一波原理分析和 vue 实现，觉得非常精巧，只能说当时个人的能力受限，在实现细节和考虑上不够到位，导致最初实现的版本体验效果不够好。")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);